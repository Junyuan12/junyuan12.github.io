<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Junyuan&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.junyuanw.com/"/>
  <updated>2019-04-29T06:38:01.650Z</updated>
  <id>http://www.junyuanw.com/</id>
  
  <author>
    <name>Junyuan Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode-Search Insert Position</title>
    <link href="http://www.junyuanw.com/2019/04/29/Leetcode035-Search%20Insert%20Position/"/>
    <id>http://www.junyuanw.com/2019/04/29/Leetcode035-Search Insert Position/</id>
    <published>2019-04-29T05:12:55.379Z</published>
    <updated>2019-04-29T06:38:01.650Z</updated>
    
    <content type="html"><![CDATA[<p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p><a id="more"></a><p>You may assume no duplicates in the array.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,3,5,6], 5</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,3,5,6], 2</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,3,5,6], 7</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><p><strong>Example 4:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,3,5,6], 0</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure><p><strong>Solution:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums.size() == <span class="number">0</span> || nums[<span class="number">0</span>] &gt; target) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums.back() &lt; target) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums.size();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] == target) &#123;</span><br><span class="line">                    res = i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] &lt; target &amp;&amp; nums[i+<span class="number">1</span>] &gt;= target) &#123;</span><br><span class="line">                    res = i+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">Time Submitted</th><th style="text-align:left">Status</th><th style="text-align:left">Runtime</th><th style="text-align:left">Memory</th><th style="text-align:left">Language</th></tr></thead><tbody><tr><td style="text-align:left">a few seconds ago</td><td style="text-align:left"><a href="https://leetcode.com/submissions/detail/225636350/" target="_blank" rel="noopener">Accepted</a></td><td style="text-align:left">8 ms</td><td style="text-align:left">8.9 MB</td><td style="text-align:left">cpp</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Runtime: 8 ms, faster than 98.61% of C++ online submissions for Search Insert Position.</span><br><span class="line">Memory Usage: 8.9 MB, less than 98.08% of C++ online submissions for Search Insert Position.</span><br></pre></td></tr></table></figure><p>查找的部分应该还可以优化，用二分查找做还可以再快一点。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.junyuanw.com/categories/Leetcode/"/>
    
    
      <category term="C++" scheme="http://www.junyuanw.com/tags/C/"/>
    
      <category term="algorithm" scheme="http://www.junyuanw.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-Remove Duplicates from Sorted Array</title>
    <link href="http://www.junyuanw.com/2019/04/23/Leetcode026-Remove%20Duplicates%20from%20Sorted%20Array/"/>
    <id>http://www.junyuanw.com/2019/04/23/Leetcode026-Remove Duplicates from Sorted Array/</id>
    <published>2019-04-23T06:39:55.054Z</published>
    <updated>2019-04-29T06:37:56.964Z</updated>
    
    <content type="html"><![CDATA[<p>Given a sorted array <em>nums</em>, remove the duplicates <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener"><strong>in-place</strong></a> such that each element appear only <em>once</em> and return the new length.</p><p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array in-place</strong> with O(1) extra memory.</p><a id="more"></a><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [1,1,2],</span><br><span class="line"></span><br><span class="line">Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.</span><br><span class="line"></span><br><span class="line">It doesn&apos;t matter what you leave beyond the returned length.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line"></span><br><span class="line">Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.</span><br><span class="line"></span><br><span class="line">It doesn&apos;t matter what values are set beyond the returned length.</span><br></pre></td></tr></table></figure><p><strong>Clarification:</strong></p><p>Confused why the returned value is an integer but your answer is an array?</p><p>Note that the input array is passed in by <strong>reference</strong>, which means modification to the input array will be known to the caller as well.</p><p>Internally you can think of this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// nums is passed in by reference. (i.e., without making a copy)</span><br><span class="line">int len = removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line">// any modification to nums in your function would be known by the caller.</span><br><span class="line">// using the length returned by your function, it prints the first len elements.</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Solution:</strong><br><code>Vector</code>在日常写程序用的比较多，所以看一眼就有了点想法。<br>传入的是<code>vector</code>的引用，需要在原数组上操作，<code>vector</code>已经排序了，比较索引为<code>i</code>和<code>i+1</code>的元素是否相同就可以，因为美股元素只能出现一次，所以有两种解决办法，遇到相同的元素移到最后或者删除，移到最后还要额外增加一个变量来计算不同元素的数量，所以直接用删除的方式。<br>需要注意的就是<code>vector</code>的删除问题，当删除索引为<code>i</code>的元素时，<code>i</code>后面的元素都会向前移动一位，要注意<code>i++</code>的索引的变化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                nums.erase(nums.begin() + i + <span class="number">1</span>);</span><br><span class="line">                i--; <span class="comment">//注意索引的变化</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> nums.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">Time Submitted</th><th style="text-align:left">Status</th><th style="text-align:left">Runtime</th><th style="text-align:left">Memory</th><th style="text-align:left">Language</th></tr></thead><tbody><tr><td style="text-align:left">a few seconds ago</td><td style="text-align:left"><a href="https://leetcode.com/submissions/detail/224381666/" target="_blank" rel="noopener">Accepted</a></td><td style="text-align:left">156 ms</td><td style="text-align:left">9.9 MB</td><td style="text-align:left">cpp</td></tr></tbody></table><p>大神的solution：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        nums.erase(<span class="built_in">std</span>::unique(nums.begin(), nums.end()), nums.end());</span><br><span class="line">        <span class="keyword">return</span> nums.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">Time Submitted</th><th style="text-align:left">Status</th><th style="text-align:left">Runtime</th><th style="text-align:left">Memory</th><th style="text-align:left">Language</th></tr></thead><tbody><tr><td style="text-align:left">a few seconds ago</td><td style="text-align:left"><a href="https://leetcode.com/submissions/detail/224392614/" target="_blank" rel="noopener">Accepted</a></td><td style="text-align:left">24 ms</td><td style="text-align:left">9.8 MB</td><td style="text-align:left">cpp</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a sorted array &lt;em&gt;nums&lt;/em&gt;, remove the duplicates &lt;a href=&quot;https://en.wikipedia.org/wiki/In-place_algorithm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;in-place&lt;/strong&gt;&lt;/a&gt; such that each element appear only &lt;em&gt;once&lt;/em&gt; and return the new length.&lt;/p&gt;
&lt;p&gt;Do not allocate extra space for another array, you must do this by &lt;strong&gt;modifying the input array in-place&lt;/strong&gt; with O(1) extra memory.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.junyuanw.com/categories/Leetcode/"/>
    
    
      <category term="C++" scheme="http://www.junyuanw.com/tags/C/"/>
    
      <category term="algorithm" scheme="http://www.junyuanw.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>C++多线程编程中std::future的使用</title>
    <link href="http://www.junyuanw.com/2019/04/22/C++%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E4%B8%ADfuture%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.junyuanw.com/2019/04/22/C++多线程编程中future的使用/</id>
    <published>2019-04-22T11:32:42.128Z</published>
    <updated>2019-04-29T06:37:14.982Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在搞多线程，C++的底子较烂，直接用<code>.detach()</code>方法创建线程，无法使输入顺序和输出顺序同步，而且输入数据在不断的产生，类似生产者和消费者问题，不断的创建新线程会浪费时间，所以想到用线程池的方法。</p> <a id="more"></a><blockquote><p>std::future是一个类模板(class template)，其对象存储未来的值，一个std::future对象在内部存储一个将来会被赋值的值，并提供了一个访问该值的机制，通过get()成员函数实现。但如果有人视图在get()函数可用之前通过它来访问相关的值，那么get()函数将会阻塞，直到该值可用。<br><em>来源：<a href="https://blog.csdn.net/lijinqi1987/article/details/78507623" target="_blank" rel="noopener">https://blog.csdn.net/lijinqi1987/article/details/78507623</a></em></p></blockquote><p>我理解这段话的意思就是因为多线程输出没办法控制输出的顺序，那么<code>future</code>就为所有会有输出的位置放一个占位符，认定这个位置会有一个输出，但是具体什么时间会有不确定。</p><p><strong>测试结果：</strong></p><p><em>来源：<a href="https://github.com/progschj/ThreadPool" target="_blank" rel="noopener">https://github.com/progschj/ThreadPool</a></em></p><p><code>GitHub</code>2k多<code>star</code>的一个线程池的项目，改了一下<code>example</code>，看输出更直观一些。</p><p>话说昨天有个小破站的后台源码被<code>push</code>上来了，<code>golang</code>的教程可能要火了，<code>push</code>一时爽，牢饭吃到老，职业道德还是要有的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hello hello hello hello hello hello hello hello hello hello 1 2 0 1 2 2 0 1 0 0 world </span><br><span class="line">1world 2  world 0 world 1 hello 2 world 2 world 2 hello 0 hello 3 world 0 world 0 hello 1</span><br><span class="line">hello 3 hello 0 hello 1 hello 2 world 0 world 1 hello 1 hello 2 world 2 world 0 hello 3 </span><br><span class="line">world 3 world 1 world 3 world 0world 1  world 2 world 2 world 1 world 3</span><br><span class="line"></span><br><span class="line">0 1 2 0 1 2 0 1 2 0 1 2 3 0 1 2 3 0 1 2 3</span><br></pre></td></tr></table></figure><p>可以发现，创建了10个线程，线程的执行是并行的，但是输出的结果和输出的顺序是一样的。</p><p><strong>完整代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//*****************ThreadPool.h**********************</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> THREAD_POOL_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> THREAD_POOL_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ThreadPool(<span class="keyword">size_t</span>);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">F</span>, <span class="title">class</span>... <span class="title">Args</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">auto</span> <span class="title">enqueue</span>(<span class="title">F</span>&amp;&amp; <span class="title">f</span>, <span class="title">Args</span>&amp;&amp;... <span class="title">args</span>) </span></span><br><span class="line"><span class="class">        -&gt; <span class="title">std</span>:</span>:future&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::result_of&lt;F(Args...)&gt;::type&gt;;</span><br><span class="line">    ~ThreadPool();</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// need to keep track of threads so we can join them</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt; <span class="built_in">std</span>::thread &gt; workers;</span><br><span class="line">    <span class="comment">// the task queue</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt; <span class="built_in">std</span>::function&lt;<span class="keyword">void</span>()&gt; &gt; tasks;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// synchronization</span></span><br><span class="line">    <span class="built_in">std</span>::mutex queue_mutex;</span><br><span class="line">    <span class="built_in">std</span>::condition_variable condition;</span><br><span class="line">    <span class="keyword">bool</span> stop;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// the constructor just launches some amount of workers</span></span><br><span class="line"><span class="keyword">inline</span> ThreadPool::ThreadPool(<span class="keyword">size_t</span> threads)</span><br><span class="line">    :   stop(<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>;i&lt;threads;++i)</span><br><span class="line">        workers.emplace_back(</span><br><span class="line">            [<span class="keyword">this</span>]</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(;;)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">std</span>::function&lt;<span class="keyword">void</span>()&gt; task;</span><br><span class="line"></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; lock(<span class="keyword">this</span>-&gt;queue_mutex);</span><br><span class="line">                        <span class="keyword">this</span>-&gt;condition.wait(lock,</span><br><span class="line">                            [<span class="keyword">this</span>]&#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;stop || !<span class="keyword">this</span>-&gt;tasks.empty(); &#125;);</span><br><span class="line">                        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;stop &amp;&amp; <span class="keyword">this</span>-&gt;tasks.empty())</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        task = <span class="built_in">std</span>::move(<span class="keyword">this</span>-&gt;tasks.front());</span><br><span class="line">                        <span class="keyword">this</span>-&gt;tasks.pop();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    task();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add new work item to the pool</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">F</span>, <span class="title">class</span>... <span class="title">Args</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">auto</span> <span class="title">ThreadPool</span>:</span>:enqueue(F&amp;&amp; f, Args&amp;&amp;... args) </span><br><span class="line">    -&gt; <span class="built_in">std</span>::future&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::result_of&lt;F(Args...)&gt;::type&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> return_type = <span class="keyword">typename</span> <span class="built_in">std</span>::result_of&lt;F(Args...)&gt;::type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> task = <span class="built_in">std</span>::make_shared&lt; <span class="built_in">std</span>::packaged_task&lt;return_type()&gt; &gt;(</span><br><span class="line">            <span class="built_in">std</span>::bind(<span class="built_in">std</span>::forward&lt;F&gt;(f), <span class="built_in">std</span>::forward&lt;Args&gt;(args)...)</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">std</span>::future&lt;return_type&gt; res = task-&gt;get_future();</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; lock(queue_mutex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// don't allow enqueueing after stopping the pool</span></span><br><span class="line">        <span class="keyword">if</span>(stop)</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"enqueue on stopped ThreadPool"</span>);</span><br><span class="line"></span><br><span class="line">        tasks.emplace([task]()&#123; (*task)(); &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    condition.notify_one();</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the destructor joins all threads</span></span><br><span class="line"><span class="keyword">inline</span> ThreadPool::~ThreadPool()</span><br><span class="line">&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; lock(queue_mutex);</span><br><span class="line">        stop = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    condition.notify_all();</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">std</span>::thread &amp;worker: workers)</span><br><span class="line">        worker.join();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//*****************example.cpp**********************</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ThreadPool.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="function">ThreadPool <span class="title">pool</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="comment">//create a &lt;future&gt; vector to wait the output</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt; <span class="built_in">std</span>::future&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &gt; results;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; batch = &#123;<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; batch.size(); b++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            batch.push_back(<span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; batch[b]; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            results.emplace_back(</span><br><span class="line">                pool.enqueue([i] &#123;</span><br><span class="line">                    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res = &#123;i&#125;; </span><br><span class="line">                    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"hello "</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">                    <span class="built_in">std</span>::this_thread::sleep_for(<span class="built_in">std</span>::chrono::seconds(<span class="number">1</span>));</span><br><span class="line">                    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"world "</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">                &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">        m--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get output</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;&amp; result: results)</span><br><span class="line">        a.emplace_back(result.get());</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//after get all output, print it</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a[i].size(); j++)</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直在搞多线程，C++的底子较烂，直接用&lt;code&gt;.detach()&lt;/code&gt;方法创建线程，无法使输入顺序和输出顺序同步，而且输入数据在不断的产生，类似生产者和消费者问题，不断的创建新线程会浪费时间，所以想到用线程池的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="http://www.junyuanw.com/categories/C/"/>
    
    
      <category term="C++" scheme="http://www.junyuanw.com/tags/C/"/>
    
      <category term="thread" scheme="http://www.junyuanw.com/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-Valid Parentheses</title>
    <link href="http://www.junyuanw.com/2019/04/11/Leetcode020-Valid%20Parentheses/"/>
    <id>http://www.junyuanw.com/2019/04/11/Leetcode020-Valid Parentheses/</id>
    <published>2019-04-11T01:30:47.584Z</published>
    <updated>2019-04-29T06:37:52.295Z</updated>
    
    <content type="html"><![CDATA[<p>之前就看到这道题，没想到好的方法，正好最近在搞数据结构，到栈这里一个应用就是括号的匹配。</p><p>Given a string containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p><a id="more"></a><p>An input string is valid if:</p><ol><li>Open brackets must be closed by the same type of brackets.</li><li>Open brackets must be closed in the correct order.</li></ol><p>Note that an empty string is also considered valid.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;()&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;(]&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>Example 4:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;([)]&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>Example 5:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;&#123;[]&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Solution:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isValid(string str) &#123;</span><br><span class="line">    stack&lt;char&gt; s1;</span><br><span class="line">    for (int i = 0; i &lt; str.size(); i++) &#123;</span><br><span class="line">        if (str[i] == &apos;(&apos; || str[i] == &apos;[&apos; || str[i] == &apos;&#123;&apos;) &#123;</span><br><span class="line">            s1.push(str[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (str[i] == &apos;)&apos; || str[i] == &apos;]&apos; || str[i] == &apos;&#125;&apos;) &#123;</span><br><span class="line">            if (s1.empty()) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            else if ((s1.top()==&apos;(&apos; &amp;&amp; str[i]==&apos;)&apos;) || (s1.top()==&apos;[&apos; &amp;&amp; str[i]==&apos;]&apos;) || (s1.top()==&apos;&#123;&apos; &amp;&amp; str[i]==&apos;&#125;&apos;)) &#123;</span><br><span class="line">                s1.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (s1.empty())</span><br><span class="line">        return true;</span><br><span class="line">    else</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>数据结构果然很重要啊！！！</p><table><thead><tr><th>Time Submitted</th><th>Status</th><th>Runtime</th><th>Memory</th><th>Language</th></tr></thead><tbody><tr><td>a few seconds ago</td><td><a href="https://leetcode.com/submissions/detail/221560125/" target="_blank" rel="noopener">Accepted</a></td><td>4 ms</td><td>8.4 MB</td><td>cpp</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前就看到这道题，没想到好的方法，正好最近在搞数据结构，到栈这里一个应用就是括号的匹配。&lt;/p&gt;
&lt;p&gt;Given a string containing just the characters &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;{&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;}&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;[&amp;#39;&lt;/code&gt; and &lt;code&gt;&amp;#39;]&amp;#39;&lt;/code&gt;, determine if the input string is valid.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.junyuanw.com/categories/Leetcode/"/>
    
    
      <category term="C++" scheme="http://www.junyuanw.com/tags/C/"/>
    
      <category term="algorithm" scheme="http://www.junyuanw.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>C++栈实现分隔符的匹配</title>
    <link href="http://www.junyuanw.com/2019/04/08/C++%E6%A0%88%E5%AE%9E%E7%8E%B0%E5%88%86%E9%9A%94%E7%AC%A6%E7%9A%84%E5%8C%B9%E9%85%8D/"/>
    <id>http://www.junyuanw.com/2019/04/08/C++栈实现分隔符的匹配/</id>
    <published>2019-04-08T02:44:59.650Z</published>
    <updated>2019-04-29T06:37:16.320Z</updated>
    
    <content type="html"><![CDATA[<p>栈是一种后进先出(<em>LIFO</em>)的线性数据结构。</p><a id="more"></a><p>栈适用于数据存储后以相反的顺序来检索的情况。站的一个应用是在程序中匹配分隔符。</p><p>在C++程序中存在下列分隔符：圆括号”<code>(</code>“和”<code>)</code>“、方括号”<code>[</code>“和”<code>]</code>“、花括号”<code>{</code>“和”<code>}</code>“、注释分隔符”<code>/*</code>“和”<code>*/</code>“</p><p><strong>栈的操作：</strong></p><ul><li>clear()——清空栈。</li><li>isEmpty()——判断栈是否为空。</li><li>push(el)——将元素el放到栈的顶部。</li><li>pop()——弹出栈顶部的元素。</li><li>topEL()——获取栈顶部的元素，不删除。</li></ul><p><strong>genStack.h</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">//******************* genStack.h ************************</span><br><span class="line">//   generic class for vector implenmentation of stack</span><br><span class="line"></span><br><span class="line">#ifndef STACK</span><br><span class="line">#define STACK</span><br><span class="line"></span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">template&lt;class T, int capacity = 30&gt;</span><br><span class="line">class Stack &#123;</span><br><span class="line">public:</span><br><span class="line">    Stack() &#123;</span><br><span class="line">        pool.reserve(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void clear() &#123;</span><br><span class="line">        pool.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool isEmpty() const &#123;</span><br><span class="line">        return pool.empty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T&amp; topEl() &#123;</span><br><span class="line">        return pool.back();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T pop() &#123;</span><br><span class="line">        T el = pool.back();</span><br><span class="line">        pool.pop_back();</span><br><span class="line">        return el;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void push(const T&amp; el) &#123;</span><br><span class="line">        pool.push_back(el);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    vector&lt;T&gt; pool;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p><strong>genStack.cpp</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">//******************* genStack.h ************************</span><br><span class="line">//用栈实现分隔符的匹配</span><br><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &quot;genStack.h&quot;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    string str = &quot;s=t[5]+u/(v*(w+y))&quot;;</span><br><span class="line">    Stack&lt;char&gt; s1;</span><br><span class="line">    for (int i = 0; i &lt; str.size(); i++) &#123;</span><br><span class="line">        //注意单引号和双引号的使用！！！</span><br><span class="line">        if (str[i] == &apos;(&apos; || str[i] == &apos;[&apos; || str[i] == &apos;&#123;&apos;) &#123;</span><br><span class="line">            s1.push(str[i]);</span><br><span class="line">            //cout &lt;&lt; &quot;topEL: &quot; &lt;&lt; s1.topEl() &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (str[i] == &apos;)&apos; || str[i] == &apos;]&apos; || str[i] == &apos;&#125;&apos;) &#123;</span><br><span class="line">            if ((s1.topEl()==&apos;(&apos; &amp;&amp; str[i]==&apos;)&apos;) || (s1.topEl()==&apos;[&apos; &amp;&amp; str[i]==&apos;]&apos;) || (s1.topEl()==&apos;&#123;&apos; &amp;&amp; str[i]==&apos;&#125;&apos;)) &#123;</span><br><span class="line">                s1.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                cout &lt;&lt; &quot;error!&quot; &lt;&lt; endl;</span><br><span class="line">                system(&quot;pause&quot;);</span><br><span class="line">                return 0;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        else if (str[i] == &apos;/&apos;) &#123;</span><br><span class="line">            if (str[i + 1] == &apos;*&apos;) &#123;</span><br><span class="line">                for (int j = i; j &lt; str.size(); j++) &#123;</span><br><span class="line">                    if (str[j] == &apos;*&apos; &amp;&amp; str[j + 1] == &apos;/&apos;) &#123;</span><br><span class="line">                        i = j + 1;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else if (j == str.size()-1) &#123;</span><br><span class="line">                        cout &lt;&lt; &quot;&apos;/*&apos; can not match &apos;*/&apos;&quot; &lt;&lt; endl;</span><br><span class="line">                        system(&quot;pause&quot;);</span><br><span class="line">                        return 0;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">                continue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (s1.isEmpty())</span><br><span class="line">        cout &lt;&lt; &quot;success!&quot; &lt;&lt; endl;</span><br><span class="line">    else</span><br><span class="line">        cout &lt;&lt; &quot;failed!&quot; &lt;&lt; endl;</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;栈是一种后进先出(&lt;em&gt;LIFO&lt;/em&gt;)的线性数据结构。&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="http://www.junyuanw.com/categories/C/"/>
    
    
      <category term="C++" scheme="http://www.junyuanw.com/tags/C/"/>
    
      <category term="algorithm" scheme="http://www.junyuanw.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-Longest Common Prefix</title>
    <link href="http://www.junyuanw.com/2019/03/31/Leetcode014-Longest%20Common%20Prefix/"/>
    <id>http://www.junyuanw.com/2019/03/31/Leetcode014-Longest Common Prefix/</id>
    <published>2019-03-31T08:10:38.178Z</published>
    <updated>2019-04-29T06:37:47.981Z</updated>
    
    <content type="html"><![CDATA[<p>Write a function to find the longest common prefix string amongst an array of strings.</p><p>If there is no common prefix, return an empty string <code>&quot;&quot;</code>.</p><a id="more"></a><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">Output: &quot;fl&quot;</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">Output: &quot;&quot;</span><br><span class="line">Explanation: There is no common prefix among the input strings.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><p>All given inputs are in lowercase letters <code>a-z</code>.</p><p><strong>Solution：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strs.size() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> minlen = INT_MAX;</span><br><span class="line">        <span class="built_in">string</span> res = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (strs[i].size() &lt; minlen)</span><br><span class="line">                minlen = strs[i].size();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; minlen; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; strs.size() - <span class="number">1</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (strs[j][i] != strs[j + <span class="number">1</span>][i])</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="literal">true</span>)</span><br><span class="line">                res = res + strs[<span class="number">0</span>][i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>没什么亮点的写法。</p><table><thead><tr><th>Time Submitted</th><th>Status</th><th>Runtime</th><th>Memory</th><th>Language</th></tr></thead><tbody><tr><td>a few seconds ago</td><td><a href="https://leetcode.com/submissions/detail/218924015/" target="_blank" rel="noopener">Accepted</a></td><td>8 ms</td><td>9.1 MB</td><td>cpp</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Write a function to find the longest common prefix string amongst an array of strings.&lt;/p&gt;
&lt;p&gt;If there is no common prefix, return an empty string &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.junyuanw.com/categories/Leetcode/"/>
    
    
      <category term="C++" scheme="http://www.junyuanw.com/tags/C/"/>
    
      <category term="algorithm" scheme="http://www.junyuanw.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>C++调用Python版Mask-R-CNN并传递和接收参数</title>
    <link href="http://www.junyuanw.com/2019/03/31/C++%E8%B0%83%E7%94%A8Python%E7%89%88Mask-R-CNN%E5%B9%B6%E4%BC%A0%E9%80%92%E5%92%8C%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0/"/>
    <id>http://www.junyuanw.com/2019/03/31/C++调用Python版Mask-R-CNN并传递和接收参数/</id>
    <published>2019-03-31T01:13:00.597Z</published>
    <updated>2019-04-29T06:37:19.253Z</updated>
    
    <content type="html"><![CDATA[<p>想做一个用Mask R-CNN只检测人的demo，发现github已经有人用Python实现了，但后处理用的是C++，所以想直接用C++器调用python，再将需要的结果返回给C++。</p><a id="more"></a><p><strong>运行环境：</strong></p><p>Visual Studio 2015，Python3.6（Anaconda），OpenCV3.4.2（C++），tensorflow1.12，Keras2.0.8</p><h3 id="C-环境配置"><a href="#C-环境配置" class="headerlink" title="C++环境配置"></a>C++环境配置</h3><ul><li><p><strong>配置OpenCV</strong></p><ol><li><p>新建一个C++工程；</p></li><li><p>右键属性$\rightarrow$C++目录$\rightarrow$包含目录$\rightarrow$点击编辑，将</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D:\Programs\opencv\build\include</span><br><span class="line">D:\Programs\opencv\build\include\opencv</span><br><span class="line">D:\Programs\opencv\build\include\opencv2</span><br></pre></td></tr></table></figure><p>加入包含目录，<strong>注意配置的方案平台版本和当前运行的一致</strong>；</p></li><li><p>右键属性$\rightarrow$C++目录$\rightarrow$库目录$\rightarrow$点击编辑，将</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Programs\opencv\build\x64\vc14\lib</span><br></pre></td></tr></table></figure><p>加入库目录，注意VS的版本，2017改用vc15的目录；</p></li><li><p>右键属性$\rightarrow$链接器$\rightarrow$输入$\rightarrow$点击编辑，将</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opencv_world342.lib</span><br></pre></td></tr></table></figure><p>加入其中。</p></li></ol></li></ul><ul><li><p><strong>配置Python环境</strong></p><ol><li><p>右键属性$\rightarrow$C++目录$\rightarrow$包含目录$\rightarrow$点击编辑，将</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\Programs\Anaconda3\include</span><br><span class="line">D:\Programs\Anaconda3\Lib\site-packages\numpy\core\include</span><br></pre></td></tr></table></figure><p>加入到包含目录中；</p></li><li><p>右键属性$\rightarrow$C++目录$\rightarrow$库目录$\rightarrow$点击编辑，将</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\Programs\Anaconda3\libs</span><br><span class="line">D:\Programs\Anaconda3\Lib\site-packages\numpy\core\lib</span><br></pre></td></tr></table></figure><p>加入库目录;</p></li><li><p>右键属性$\rightarrow$链接器$\rightarrow$输入$\rightarrow$点击编辑，将</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python36.lib</span><br></pre></td></tr></table></figure><p>加入其中，注意只有python36，没有python36d，所以调试的时候要用relese的版本，debug的版本会报错。</p></li></ol></li></ul><h3 id="调用Python"><a href="#调用Python" class="headerlink" title="调用Python"></a>调用Python</h3><ul><li><p><strong>从C++输入图片数据</strong></p><p>由于C++用OpenCV读取的图片格式和Mask R-CNN的输入格式不同，所以需要先用C++处理好图片，传递给Python。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Mat img = imread(&quot;./image.jpg&quot;);</span><br><span class="line">auto sz = img.size();</span><br><span class="line">int x = sz.width;</span><br><span class="line">int y = sz.height;</span><br><span class="line">int z = img.channels();</span><br><span class="line">uchar *CArrays = new uchar[x*y*z];</span><br><span class="line">int iChannels = img.channels();</span><br><span class="line">int iRows = img.rows;</span><br><span class="line">int iCols = img.cols * iChannels;</span><br><span class="line">if (img.isContinuous())</span><br><span class="line">&#123;</span><br><span class="line">    iCols *= iRows;</span><br><span class="line">    iRows = 1;</span><br><span class="line">&#125;</span><br><span class="line">uchar* p;</span><br><span class="line">int id = -1;</span><br><span class="line">for (int i = 0; i &lt; iRows; i++)</span><br><span class="line">&#123;</span><br><span class="line">    // get the pointer to the ith row</span><br><span class="line">    p = img.ptr&lt;uchar&gt;(i);</span><br><span class="line">    // operates on each pixel</span><br><span class="line">    for (int j = 0; j &lt; iCols; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        CArrays[++id] = p[j];//连续空间</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">npy_intp Dims[3] = &#123;y, x, z&#125;; //注意这个维度数据！</span><br><span class="line">PyObject *PyArray = PyArray_SimpleNewFromData(3, Dims, NPY_UBYTE, CArrays);</span><br></pre></td></tr></table></figure></li><li><p><strong>调用Mask R-CNN</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">//初始化python</span><br><span class="line">Py_Initialize();</span><br><span class="line">import_array();</span><br><span class="line"></span><br><span class="line">PyRun_SimpleString(&quot;import sys&quot;);</span><br><span class="line">PyRun_SimpleString(&quot;sys.path.append(r&apos;C:\\Users\\Administrator\\Documents\\Keypoints-of-humanpose-with-Mask-R-CNN-master&apos;)&quot;);</span><br><span class="line"></span><br><span class="line">//定义python类型的变量</span><br><span class="line">PyObject *pModule = NULL;</span><br><span class="line">PyObject *pFunc = NULL;</span><br><span class="line">PyObject *pArg = NULL;</span><br><span class="line">PyObject *result = NULL;</span><br><span class="line">PyObject *pDict = NULL;</span><br><span class="line"></span><br><span class="line">//直接运行python代码</span><br><span class="line">PyRun_SimpleString(&quot;print(&apos;python start&apos;)&quot;);</span><br><span class="line"></span><br><span class="line">PyObject *ArgList = PyTuple_New(1);</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">PyTuple_SetItem(ArgList, 0, PyArray);</span><br><span class="line"></span><br><span class="line">//引入模块</span><br><span class="line">pModule = PyImport_ImportModule(&quot;human_detected&quot;);</span><br><span class="line"></span><br><span class="line">if (!pModule)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; &quot;Import Module Failed&quot; &lt;&lt; endl;</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//获取模块字典属性</span><br><span class="line">pDict = PyModule_GetDict(pModule);</span><br><span class="line"></span><br><span class="line">//直接获取模块中的函数</span><br><span class="line">pFunc = PyObject_GetAttrString(pModule, &quot;detect&quot;);</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Mask R-CNN接受参数并返回值</strong></p><p>Mask R-CNN检测人项目地址：<a href="https://github.com/Junyuan12/Mask_RCNN_Humanpose" target="_blank" rel="noopener">https://github.com/Junyuan12/Mask_RCNN_Humanpose</a></p><p>Mask R-CNN的配置就不细说了，网上有很多教程，主要是windows下配置pycocotools可能会有问题，</p><p>windows下pycocotools安装教程：<a href="https://blog.csdn.net/qq_29592829/article/details/82877494" target="_blank" rel="noopener">https://blog.csdn.net/qq_29592829/article/details/82877494</a></p><p>在Mask R-CNN中新建一个py文件，<code>human_detected.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import random</span><br><span class="line">import math</span><br><span class="line">import numpy as np</span><br><span class="line">import skimage.io</span><br><span class="line">import matplotlib</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">import coco</span><br><span class="line">import utils</span><br><span class="line">import model as modellib</span><br><span class="line">import visualize</span><br><span class="line">from model import log</span><br><span class="line">import cv2</span><br><span class="line"></span><br><span class="line">def detect(image):</span><br><span class="line"># print(image)</span><br><span class="line">ROOT_DIR = os.getcwd()</span><br><span class="line"># Directory to save logs and trained model</span><br><span class="line">MODEL_DIR = os.path.join(ROOT_DIR, &quot;mylogs&quot;)</span><br><span class="line"></span><br><span class="line"># Local path to trained weights file</span><br><span class="line">COCO_MODEL_PATH = os.path.join(ROOT_DIR, &quot;mask_rcnn_coco_humanpose.h5&quot;)</span><br><span class="line"># Download COCO trained weights from Releases if needed</span><br><span class="line">if not os.path.exists(COCO_MODEL_PATH):</span><br><span class="line">    utils.download_trained_weights(COCO_MODEL_PATH)</span><br><span class="line"></span><br><span class="line">class InferenceConfig(coco.CocoConfig):</span><br><span class="line">    GPU_COUNT = 1</span><br><span class="line">    IMAGES_PER_GPU = 1</span><br><span class="line">    KEYPOINT_MASK_POOL_SIZE = 7</span><br><span class="line"></span><br><span class="line">inference_config = InferenceConfig()</span><br><span class="line"></span><br><span class="line"># Recreate the model in inference mode</span><br><span class="line">model = modellib.MaskRCNN(mode=&quot;inference&quot;, </span><br><span class="line">                          config=inference_config,</span><br><span class="line">                          model_dir=MODEL_DIR)</span><br><span class="line"></span><br><span class="line"># Get path to saved weights</span><br><span class="line"></span><br><span class="line">model_path = os.path.join(ROOT_DIR, &quot;mask_rcnn_coco_humanpose.h5&quot;)</span><br><span class="line">assert model_path != &quot;&quot;, &quot;Provide path to trained weights&quot;</span><br><span class="line">print(&quot;Loading weights from &quot;, model_path)</span><br><span class="line">model.load_weights(model_path, by_name=True)</span><br><span class="line"></span><br><span class="line"># COCO Class names</span><br><span class="line">#For human pose task We just use &quot;BG&quot; and &quot;person&quot;</span><br><span class="line">class_names = [&apos;BG&apos;, &apos;person&apos;]</span><br><span class="line"></span><br><span class="line">#BGR-&gt;RGB</span><br><span class="line">image = image[:,:,::-1]</span><br><span class="line">#print(np.shape(image))</span><br><span class="line"></span><br><span class="line"># Run detection</span><br><span class="line">results = model.detect_keypoint([image], verbose=1)</span><br><span class="line">r = results[0] # for one image</span><br><span class="line"></span><br><span class="line">log(&quot;rois&quot;,r[&apos;rois&apos;])</span><br><span class="line">log(&quot;keypoints&quot;,r[&apos;keypoints&apos;])</span><br><span class="line">log(&quot;class_ids&quot;,r[&apos;class_ids&apos;])</span><br><span class="line">log(&quot;keypoints&quot;,r[&apos;keypoints&apos;])</span><br><span class="line">log(&quot;masks&quot;,r[&apos;masks&apos;])</span><br><span class="line">log(&quot;scores&quot;,r[&apos;scores&apos;])</span><br><span class="line"></span><br><span class="line">visualize.display_instances(image, r[&apos;rois&apos;], r[&apos;masks&apos;], r[&apos;class_ids&apos;], </span><br><span class="line">                            class_names, r[&apos;scores&apos;])</span><br><span class="line">flat_roi = r[&apos;rois&apos;].flatten()</span><br><span class="line">print(flat_roi)</span><br><span class="line"> </span><br><span class="line">return flat_roi</span><br></pre></td></tr></table></figure><p>其中包括一个函数<code>detect(image)</code>，用于接受C++传进来的图片，并最终返回每个人的<code>roi</code>。</p></li><li><p><strong>C++接受返回参数</strong></p><p>python将结果展开成一列，C++接受返回的一维数组并输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 调用直接获得的函数,并传递参数</span><br><span class="line">PyObject *pReturn = PyObject_CallObject(pFunc, ArgList);</span><br><span class="line"></span><br><span class="line">//获取python程序的返回结果</span><br><span class="line">//以下是对返回的一维数组结果进行处理</span><br><span class="line">if (pReturn)</span><br><span class="line">&#123;</span><br><span class="line">    //将结果类型转换成数组对象类型</span><br><span class="line">    PyArrayObject *pyResultArr = (PyArrayObject *)pReturn;</span><br><span class="line"></span><br><span class="line">    //从Python中的PyArrayObject解析出数组数据为c的double类型。</span><br><span class="line">    int *resDataArr = (int *)PyArray_DATA(pyResultArr);</span><br><span class="line">    int dimNum = PyArray_NDIM(pyResultArr);//返回数组的维度数，此处恒为1</span><br><span class="line">    npy_intp *pdim = PyArray_DIMS(pyResultArr);//返回数组各维度上的元素个数值</span><br><span class="line"></span><br><span class="line">    //以下是对返回结果的输出显示</span><br><span class="line">    for (int i = 0; i &lt; dimNum; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        for (int j = 0; j &lt; pdim[0]; ++j)</span><br><span class="line">            cout &lt;&lt; resDataArr[i * pdim[0] + j] &lt;&lt; &quot;,&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>完整代码如下</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;Python.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;numpy/arrayobject.h&gt;</span><br><span class="line">#include &lt;opencv2/highgui/highgui.hpp&gt;</span><br><span class="line">#include &lt;opencv2/imgproc/imgproc.hpp&gt;</span><br><span class="line">#include &lt;opencv2/core/core.hpp&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">cv::Mat img = cv::imread(&quot;./image.jpg&quot;);</span><br><span class="line">//初始化python</span><br><span class="line">Py_Initialize();</span><br><span class="line">import_array();</span><br><span class="line"></span><br><span class="line">PyRun_SimpleString(&quot;import sys&quot;);</span><br><span class="line">PyRun_SimpleString(&quot;sys.path.append(r&apos;C:\\Users\\Administrator\\Documents\\Keypoints-of-humanpose-with-Mask-R-CNN-master&apos;)&quot;);</span><br><span class="line">//PyRun_SimpleString(&quot;print(sys.path)&quot;);</span><br><span class="line"></span><br><span class="line">//定义python类型的变量</span><br><span class="line"></span><br><span class="line">PyObject *pModule = NULL;</span><br><span class="line">PyObject *pFunc = NULL;</span><br><span class="line">PyObject *pArg = NULL;</span><br><span class="line">PyObject *result = NULL;</span><br><span class="line">PyObject *pDict = NULL;</span><br><span class="line"></span><br><span class="line">//直接运行python代码</span><br><span class="line">PyRun_SimpleString(&quot;print(&apos;python start&apos;)&quot;);</span><br><span class="line"></span><br><span class="line">PyObject *ArgList = PyTuple_New(1);</span><br><span class="line"></span><br><span class="line">auto sz = img.size();</span><br><span class="line">int x = sz.width;</span><br><span class="line">int y = sz.height;</span><br><span class="line">int z = img.channels();</span><br><span class="line">uchar *CArrays = new uchar[x*y*z];</span><br><span class="line">int iChannels = img.channels();</span><br><span class="line">int iRows = img.rows;</span><br><span class="line">int iCols = img.cols * iChannels;</span><br><span class="line">if (img.isContinuous())</span><br><span class="line">&#123;</span><br><span class="line">iCols *= iRows;</span><br><span class="line">iRows = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uchar* p;</span><br><span class="line">int id = -1;</span><br><span class="line">for (int i = 0; i &lt; iRows; i++)</span><br><span class="line">&#123;</span><br><span class="line">// get the pointer to the ith row</span><br><span class="line">p = img.ptr&lt;uchar&gt;(i);</span><br><span class="line">// operates on each pixel</span><br><span class="line">for (int j = 0; j &lt; iCols; j++)</span><br><span class="line">&#123;</span><br><span class="line">CArrays[++id] = p[j];//连续空间</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">npy_intp Dims[3] = &#123; y, x, z &#125;; //注意这个维度数据！</span><br><span class="line">PyObject *PyArray = PyArray_SimpleNewFromData(3, Dims, NPY_UBYTE, CArrays);</span><br><span class="line">PyTuple_SetItem(ArgList, 0, PyArray);</span><br><span class="line"></span><br><span class="line">//引入模块</span><br><span class="line">pModule = PyImport_ImportModule(&quot;human_detected&quot;);</span><br><span class="line"></span><br><span class="line">if (!pModule)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;Import Module Failed&quot; &lt;&lt; endl;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//获取模块字典属性</span><br><span class="line">pDict = PyModule_GetDict(pModule);</span><br><span class="line"></span><br><span class="line">//直接获取模块中的函数</span><br><span class="line">pFunc = PyObject_GetAttrString(pModule, &quot;detect&quot;);</span><br><span class="line"></span><br><span class="line">// 调用直接获得的函数,并传递参数</span><br><span class="line">PyObject *pReturn = PyObject_CallObject(pFunc, ArgList);</span><br><span class="line"></span><br><span class="line">//获取python程序的返回结果</span><br><span class="line">//以下是对返回的一维数组结果进行处理</span><br><span class="line">if (pReturn) &#123;</span><br><span class="line">//将结果类型转换成数组对象类型</span><br><span class="line">PyArrayObject *pyResultArr = (PyArrayObject *)pReturn;</span><br><span class="line"></span><br><span class="line">//从Python中的PyArrayObject解析出数组数据为c的double类型。</span><br><span class="line">int *resDataArr = (int *)PyArray_DATA(pyResultArr);</span><br><span class="line">int dimNum = PyArray_NDIM(pyResultArr);//返回数组的维度数，此处恒为1</span><br><span class="line">npy_intp *pdim = PyArray_DIMS(pyResultArr);//返回数组各维度上的元素个数值</span><br><span class="line"></span><br><span class="line">   //以下是对返回结果的输出显示</span><br><span class="line">for (int i = 0; i &lt; dimNum; ++i) &#123;</span><br><span class="line">for (int j = 0; j &lt; pdim[0]; ++j)</span><br><span class="line">cout &lt;&lt; resDataArr[i * pdim[0] + j] &lt;&lt; &quot;,&quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PyRun_SimpleString(&quot;print(&apos;python end&apos;)&quot;);</span><br><span class="line"></span><br><span class="line">////释放python</span><br><span class="line">Py_Finalize();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想做一个用Mask R-CNN只检测人的demo，发现github已经有人用Python实现了，但后处理用的是C++，所以想直接用C++器调用python，再将需要的结果返回给C++。&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="http://www.junyuanw.com/categories/C/"/>
    
    
      <category term="C++" scheme="http://www.junyuanw.com/tags/C/"/>
    
      <category term="python" scheme="http://www.junyuanw.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-Roman to Integer</title>
    <link href="http://www.junyuanw.com/2019/03/29/Leetcode013-Roman%20to%20Integer/"/>
    <id>http://www.junyuanw.com/2019/03/29/Leetcode013-Roman to Integer/</id>
    <published>2019-03-29T12:01:50.381Z</published>
    <updated>2019-04-29T06:37:43.664Z</updated>
    
    <content type="html"><![CDATA[<p>Roman numerals are represented by seven different symbols: <code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Symbol       Value</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure><p>For example, two is written as <code>II</code> in Roman numeral, just two one’s added together. Twelve is written as, <code>XII</code>, which is simply <code>X</code> + <code>II</code>. The number twenty seven is written as <code>XXVII</code>, which is <code>XX</code> + <code>V</code> + <code>II</code>.</p><p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p><ul><li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9. </li><li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90. </li><li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li></ul><p>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;III&quot;</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;IV&quot;</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;IX&quot;</span><br><span class="line">Output: 9</span><br></pre></td></tr></table></figure><p><strong>Example 4:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;LVIII&quot;</span><br><span class="line">Output: 58</span><br><span class="line">Explanation: L = 50, V= 5, III = 3.</span><br></pre></td></tr></table></figure><p><strong>Example 5:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;MCMXCIV&quot;</span><br><span class="line">Output: 1994</span><br><span class="line">Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.</span><br></pre></td></tr></table></figure><p>最开始想用每种情况都写一遍，虽然会的不多，但还是嫌麻烦，想到了Python中的用两个<code>list</code>去对应相同的索引的不同类型，所以用数组老对应不同的罗马符号。</p><p><strong>Solution：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int romanToInt(string s) &#123;</span><br><span class="line">        int num[] = &#123;1, 5, 10, 50, 100, 500, 1000&#125;;</span><br><span class="line">        string rom = &quot;IVXLCDM&quot;;</span><br><span class="line">        vector&lt;int&gt; tmp;</span><br><span class="line">        int res = 0;</span><br><span class="line">        for (int i = 0; i &lt; s.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for (int j = 0; j &lt; 7; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                if (s[i] == rom[j])</span><br><span class="line">                    tmp.push_back(num[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 0; i &lt; tmp.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (i == tmp.size() - 1 || tmp[i] &gt;= tmp[i + 1])</span><br><span class="line">            &#123;</span><br><span class="line">                res += tmp[i];</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                res -= tmp[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>if (i == tmp.size() - 1 || tmp[i] &gt;= tmp[i + 1])</code>，这里最开始是<code>if(tmp[i] &gt;= tmp[i + 1])</code>，处理<code>&quot;MCDLXXVI&quot;</code>时报错了，输出结果发现最后的<code>I</code>并没有加进去，很神奇，原因还没找到，先留个坑。</p><table><thead><tr><th>Time Submitted</th><th>Status</th><th>Runtime</th><th>Memory</th><th>Language</th></tr></thead><tbody><tr><td>a few seconds ago</td><td><a href="https://leetcode.com/submissions/detail/218498486/" target="_blank" rel="noopener">Accepted</a></td><td>20 ms</td><td>9 MB</td><td>cpp</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Roman numerals are represented by seven different symbols: &lt;code&gt;I&lt;/code&gt;, &lt;code&gt;V&lt;/code&gt;, &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt; and &lt;code&gt;M&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.junyuanw.com/categories/Leetcode/"/>
    
    
      <category term="C++" scheme="http://www.junyuanw.com/tags/C/"/>
    
      <category term="algorithm" scheme="http://www.junyuanw.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-Palindrome Number</title>
    <link href="http://www.junyuanw.com/2019/03/28/Leetcode009-Palindrome%20Number/"/>
    <id>http://www.junyuanw.com/2019/03/28/Leetcode009-Palindrome Number/</id>
    <published>2019-03-28T05:07:16.091Z</published>
    <updated>2019-04-29T06:37:39.553Z</updated>
    
    <content type="html"><![CDATA[<p>Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.</p><a id="more"></a><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 121</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: -121</span><br><span class="line">Output: false</span><br><span class="line">Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: 10</span><br><span class="line">Output: false</span><br><span class="line">Explanation: Reads 01 from right to left. Therefore it is not a palindrome.</span><br></pre></td></tr></table></figure><p><strong>Follow up:</strong></p><p>Coud you solve it without converting the integer to a string?</p><p>算法思想和第7题差不多，而且说了不让用string，就是第7题之后加个判断，感觉自己在偷懒，但是还是想了好长时间才想出来。</p><p><strong>Solution：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isPalindrome(int x) &#123;</span><br><span class="line">        int res = 0, tmp = x;</span><br><span class="line">        if (x &lt; 0)</span><br><span class="line">            return false;</span><br><span class="line">        while (tmp != 0) &#123;</span><br><span class="line">            int pop = tmp % 10;</span><br><span class="line">            tmp /= 10;</span><br><span class="line">            if (res &gt; INT_MAX/10 || (res == INT_MAX / 10 &amp;&amp; pop &gt; 7)) return 0;</span><br><span class="line">            if (res &lt; INT_MIN/10 || (res == INT_MIN / 10 &amp;&amp; pop &lt; -8)) return 0;</span><br><span class="line">            res = res * 10 + pop;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        if (res == x)</span><br><span class="line">            return true;</span><br><span class="line">        else</span><br><span class="line">            return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><table><thead><tr><th>Time Submitted</th><th>Status</th><th>Runtime</th><th>Memory</th><th style="text-align:center">Language</th></tr></thead><tbody><tr><td>a few seconds ago</td><td><a href="https://leetcode.com/submissions/detail/218192437/" target="_blank" rel="noopener">Accepted</a></td><td>32 ms</td><td>8 MB</td><td style="text-align:center">cpp</td></tr></tbody></table><p>最近负能量有点多，需要心灵鸡汤透一透，最好是喝完能上头的那种。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.junyuanw.com/categories/Leetcode/"/>
    
    
      <category term="C++" scheme="http://www.junyuanw.com/tags/C/"/>
    
      <category term="algorithm" scheme="http://www.junyuanw.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>通过git将项目上传到github</title>
    <link href="http://www.junyuanw.com/2019/03/27/%E9%80%9A%E8%BF%87git%E5%B0%86%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0github/"/>
    <id>http://www.junyuanw.com/2019/03/27/通过git将项目上传到github/</id>
    <published>2019-03-27T08:31:31.282Z</published>
    <updated>2019-04-29T06:35:57.556Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://blog.csdn.net/jerryhanjj/article/details/72777618" target="_blank" rel="noopener">https://blog.csdn.net/jerryhanjj/article/details/72777618</a></p><a id="more"></a><h3 id="配置Git、SSH"><a href="#配置Git、SSH" class="headerlink" title="配置Git、SSH"></a>配置Git、SSH</h3><ul><li><p>下载、安装Git</p></li><li><p>绑定用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot; </span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure></li><li><p>配置SSH</p><p>在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开GitBash），创建<code>SSH Key</code>，密码可以不设置直接回车。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure><p>如果一切顺利的话，可以在用户主目录里找到 <code>.ssh​</code>目录，里面有 <code>id_rsa</code> 和<code>id_rsa.pub</code> 两个文件，这两个就是<code>SSH Key</code> 的秘钥对，<strong>id_rsa 是私钥，不能泄露出去</strong>，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。用记事本打开 <code>id_rsa.pub</code>，得到<code>ssh key</code> 公钥。</p><p>为 Github 账户添加 ssh key 。登录 Github，展开个人头像的小三角，点<code>settings</code>，然后打开<code>SSH keys</code>菜单，点击<code>Add SSH key</code>新增密钥，填上标题。</p></li></ul><h3 id="上传项目"><a href="#上传项目" class="headerlink" title="上传项目"></a>上传项目</h3><ul><li><p><strong>建立仓库</strong></p><p>填一下仓库名称，Initialize this repository with a README是可选的，<strong>建议在创建时选上</strong>，可以在后面省一个步骤。填好之后，点Create repository完成仓库的建立。</p></li><li><p><strong>克隆仓库</strong></p><p><strong>如果是全新的项目没有任何文件，也可以不用克隆仓库，跳过这一步。</strong>点开 Git Shell，进入命令行。首先我们先要把 GitHub 上的我们新建的仓库 clone下来。在初始化版本库之前，先要确认认证的公钥是否正确。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果收到成功的确认消息，就可以开始克隆远程仓库了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/username/program-name.git</span><br></pre></td></tr></table></figure><p>克隆仓库之后就在文件夹中出现了项目文件夹及文件,<strong>进入项目文件夹</strong>，对其进行初始化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure></li><li><p><strong>上传README文件</strong></p><p>如果在创建 <code>Github</code> 仓库时没有勾选创建 <code>README.md</code> 文件，则要先创建 <code>README.md</code> 文件，不然上传文件会报错。如果已经勾选，可以跳过此步骤。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ touch README.md</span><br><span class="line">$ git add README.md</span><br><span class="line">$ git commit -m &apos;first_commit&apos;</span><br><span class="line">$ git remote add origin</span><br></pre></td></tr></table></figure></li><li><p><strong>上传项目</strong></p><p>跟踪项目文件夹中的所有文件和文件夹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure><p>输入本次的提交说明，准备提交暂存区中的更改的已跟踪文件，单引号内为说明内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &apos;first_commit&apos;</span><br></pre></td></tr></table></figure><p>关联远程仓库，添加后，远程库的名字就是 <code>origin</code>，这是 <code>Git</code> 默认的叫法，也可以改成别的，但是 <code>origin</code> 这个名字一看就知道是远程库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin https://github.com/username/program-name.git</span><br></pre></td></tr></table></figure><p>如果关联出现错误 <code>fatal: remote origin already exists</code>，则执行<code>git remote rm origin</code>再进行关联。</p><p>把本地库的所有内容推送到远程库上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><p>如果在推送时出现错误 <code>error:failed to push som refs to.......</code>，则执行下列语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin master</span><br></pre></td></tr></table></figure><p>将远程仓库 <code>Github</code> 上的文件拉下来合并之后重新推送上去。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文链接：&lt;a href=&quot;https://blog.csdn.net/jerryhanjj/article/details/72777618&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/jerryhanjj/article/details/72777618&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="http://www.junyuanw.com/categories/git/"/>
    
    
      <category term="git" scheme="http://www.junyuanw.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-Reverse Integer</title>
    <link href="http://www.junyuanw.com/2019/03/26/Leetcode007-Reverse%20Integer/"/>
    <id>http://www.junyuanw.com/2019/03/26/Leetcode007-Reverse Integer/</id>
    <published>2019-03-26T05:03:28.828Z</published>
    <updated>2019-04-29T06:37:35.001Z</updated>
    
    <content type="html"><![CDATA[<p>Given a 32-bit signed integer, reverse digits of an integer.</p><a id="more"></a><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 123</span><br><span class="line">Output: 321</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: -123</span><br><span class="line">Output: -321</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 120</span><br><span class="line">Output: 21</span><br></pre></td></tr></table></figure><p><strong>Note:</strong><br>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: $[−2^{31},  2^{31 − 1}]$. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p><p> 看起来是一个特别简单的问题，第一想法也是个野路子，先把整型转字符串，再将字符串逆序排列一下，在转换回整型，感觉不妥。</p><p>算法思想特别简单，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = res * 10 + x % 10;</span><br></pre></td></tr></table></figure><p>其实我没想到，看了别人的答案才领悟。</p><p>这里很容易懂，但是数据溢出是个大问题，我以为一句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x &gt;= INT_MIN || x &lt;= INT_MAX</span><br></pre></td></tr></table></figure><p>就可以解决了，too young, too naive. 果然要偷偷看答案了。</p><p><strong>核心思想：</strong></p><ol><li>pop = x % 10, If $temp = res\times10 + pop$ causes overflow, then it must be that $res\geq\frac{INTMAX}{10}$</li><li>If  $res\geq\frac{INTMAX}{10}$, then  $temp = res\times10 + pop$ is guaranteed to overflow</li><li>If $res==\frac{INTMAX}{10}$, then  $temp = res\times10 + pop$ will overflow if and only if  $pop &gt; 7$</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rev = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> pop = x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (rev &gt; INT_MAX/<span class="number">10</span> || (rev == INT_MAX / <span class="number">10</span> &amp;&amp; pop &gt; <span class="number">7</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (rev &lt; INT_MIN/<span class="number">10</span> || (rev == INT_MIN / <span class="number">10</span> &amp;&amp; pop &lt; <span class="number">-8</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            rev = rev * <span class="number">10</span> + pop;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a 32-bit signed integer, reverse digits of an integer.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.junyuanw.com/categories/Leetcode/"/>
    
    
      <category term="C++" scheme="http://www.junyuanw.com/tags/C/"/>
    
      <category term="algorithm" scheme="http://www.junyuanw.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-Two Sum</title>
    <link href="http://www.junyuanw.com/2019/03/25/Leetcode001-Two%20Sum/"/>
    <id>http://www.junyuanw.com/2019/03/25/Leetcode001-Two Sum/</id>
    <published>2019-03-25T12:26:21.083Z</published>
    <updated>2019-04-29T06:37:29.079Z</updated>
    
    <content type="html"><![CDATA[<p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p><p>You may assume that each input would have <strong>exactly</strong> one solution, and you may not use the same element twice.</p><a id="more"></a><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [2, 7, 11, 15], target = 9,</span><br><span class="line"></span><br><span class="line">Because nums[0] + nums[1] = 2 + 7 = 9,</span><br><span class="line">return [0, 1].</span><br></pre></td></tr></table></figure><p><strong>Solution:</strong></p><p>我的解决方案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123;</span><br><span class="line">        vector&lt;int&gt; index;</span><br><span class="line">        for (int i = 0; i &lt; nums.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for (int j = i; j &lt; nums.size(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                if (i != j &amp;&amp; (nums[i] + nums[j] == target))</span><br><span class="line">                &#123;</span><br><span class="line">                    index.push_back(i);</span><br><span class="line">                    index.push_back(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Runtime: 384 ms, faster than 5.00% of C++ online submissions for Two Sum.</span><br><span class="line">Memory Usage: 9.4 MB, less than 90.00% of C++ online submissions for Two Sum.</span><br></pre></td></tr></table></figure><p>算法比较蠢，单纯的遍历，长路漫漫，还要好好学。</p><p>Top Voted Solution：</p><p>The basic idea is to maintain a hash table for each element num in nums, using num as key and its index (0-based) as value. For each num, search for target - num in the hash table. If it is found and is not the same element as num, then we are done.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123;</span><br><span class="line">        unordered_map&lt;int, int&gt; indices;</span><br><span class="line">        for (int i = 0; i &lt; nums.size(); i++) &#123;</span><br><span class="line">            if (indices.find(target - nums[i]) != indices.end()) &#123;</span><br><span class="line">                return &#123;indices[target - nums[i]], i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            indices[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        return &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given an array of integers, return &lt;strong&gt;indices&lt;/strong&gt; of the two numbers such that they add up to a specific target.&lt;/p&gt;
&lt;p&gt;You may assume that each input would have &lt;strong&gt;exactly&lt;/strong&gt; one solution, and you may not use the same element twice.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.junyuanw.com/categories/Leetcode/"/>
    
    
      <category term="C++" scheme="http://www.junyuanw.com/tags/C/"/>
    
      <category term="algorithm" scheme="http://www.junyuanw.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.junyuanw.com/2019/03/25/hello-world/"/>
    <id>http://www.junyuanw.com/2019/03/25/hello-world/</id>
    <published>2019-03-25T02:47:34.182Z</published>
    <updated>2019-04-29T06:38:27.868Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><p>​    很早以前就觉得能有一个自己的博客是特别牛X的事情，终于在大神的慢慢影响下，逐渐去学习以前没想过的东西，数学也好，算法也罢，起码每天前进一点。</p><p>​    终于学会用GitHub搭博客了，照着博客的流程玩了一小天，突然就觉得自己以前好蠢，以后，要保持更新了。</p>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;​    很早以前就觉得能有一个自己的博客是特别牛X的事情，终于在大神的慢慢影响下，逐渐去学习以前没想过的东西，数学也好，算法也罢，起码每天前进一点。&lt;/p&gt;
&lt;p&gt;​    终于学会用GitHub搭博客了，照着博客的流程玩了一小天，突
      
    
    </summary>
    
    
  </entry>
  
</feed>
